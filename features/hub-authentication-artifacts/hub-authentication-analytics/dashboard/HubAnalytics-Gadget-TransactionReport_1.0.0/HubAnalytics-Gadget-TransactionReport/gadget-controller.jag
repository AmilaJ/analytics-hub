<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {


    include("../HubAnalytics-Gadget-Commons/controller-util.jag");



    response.contentType = 'application/json';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';
    var FILE_NAME = '-transaction-report-';


    var action = request.getParameter("action");
    var data = request.getContent();

    var user = session.get('user');


    var carbon = require('carbon');
    var userRealmService = carbon.server.osgiService('org.wso2.carbon.user.api.UserRealmService');
    var tenantId = userRealmService.getTenantManager().getTenantId(user.domain);
    var userRealm = userRealmService.getTenantUserRealm(tenantId);
    var userStore = userRealm.getUserStoreManager();
    var department = userStore.getUserClaimValue(user.username, 'http://wso2.org/claims/department', null);

    var role = "";
    var serviceProvider = "";

    var log = new Log();

    role = getRole(user);

    if (action === 'getSchema') {

        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        print(providerAPI.getSchema(providerConf));
        return;

    } else if (action === 'getData') {
        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');

        providerConf.query = getDataQuery(data, role);


        print(providerAPI.getData(providerConf));
        return;
    } else if (user != null) {

        var userReportDirectory = "/reports/transactions/" + user.username + "/";
        var directory = "repository/deployment/server/jaggeryapps/portal/" + userReportDirectory;

        if (role == "") {
            print({'message': 'Not Allowed!'});
            return;
        }
        var reportPrefix = user.username + FILE_NAME;
        if (action == "generate") {


            removeAllFiles(userReportDirectory, reportPrefix);
            var carbon = require('carbon');
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');


            var reportMaxLength = 1000000;


            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
            log.info('providerConf[PROVIDER_NAME] ' + providerConf[PROVIDER_NAME]);

            var tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_PROCESSEDSTATISTICS";
            //  log.info("data.applicationName => " + data.applicationName + "  => " + providerConf.query);
            if (data.api != "0" && data.api != undefined) {



                var jagConf = require('jagConf.json');
                var tableList = jagConf["tableList"]["tables"];
                var specialApis = jagConf["tableList"]["apid"];
                if (specialApis.indexOf(data.api) > -1) {
                    tableName = tableList[specialApis.indexOf(data.api)];
                }
                log.info('table name >>>>>>>.. ' + tableName);
                tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_PROCESSEDSTATISTICS";//REMOVE this line - TEMP CODE
                log.info('table name updated >>>>>>>.. ' + tableName);


            }


            var reportType = "transaction";
            var reportName = directory + reportPrefix + new Date().getTime();
            service.generateCSVReport(tableName, getBatchQuery(data, role), reportName, reportMaxLength, reportType);

            print({'message': 'Report is generating'});
            return;
        } else if (action == "available") {

            var file = new File(userReportDirectory);

            var files = [];
            for (var i = 0; i < file.listFiles().length; i++) {
                if (!file.listFiles()[i].getName().search(reportPrefix)) {
                    files[i] = {"name": file.listFiles()[i].getName(), "index": i};
                }
            }
            print(files);
            return;

        } else if (action == "get" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory).listFiles()[request.getParameter("index")];
            response.contentType = "application/octet-stream";
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());

        } else if (action == "remove" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
            return;
        }
    }
}());


function removeAllFiles(userReportDirectory, reportPrefix1) {
    var file = new File(userReportDirectory);

    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix1)) {
            log.info("File " + file.listFiles()[i].getName() + " deleted.");
            var result = file.listFiles()[i].del();
//log.info(result);

        }
    }
};



%>
