<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    response.contentType = 'application/json';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';

    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var data = request.getContent();
    var providerConf = data[PROVIDER_CONF];
    var carbon = require('carbon');
    var user = session.get('user');
    var log = new Log();
    var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");
    var role = getRole(user);
    var operatorNameInProfile = getOperator(user);

    if(action === 'getRole') {
        var jsonRole = {"role": role };
        print(jsonRole);
        return;
    }

    if(action === 'getProfileOperator') {
        var jsonOperatorName = {"operatorName": operatorNameInProfile };
        print(jsonOperatorName);
        return;
    }

    if (action === 'getSchema') {
        print(providerAPI.getSchema(providerConf));
        return;
    } else if(action === 'getData'){
        providerConf.query = "";
        //Check logged in user role and decide which operators to load
        var all = true;
        var currentOperator;
        if(operatorNameInProfile != null) {
            currentOperator = operatorNameInProfile;
        }
        var user = session.get('user');

        log.info("user"+ stringify(user));


        include("../HubAnalytics-Gadget-Commons/controller-util.jag");
        var role = getRole(user);
        var serviceProvider = "";
        if (role == "serviceProvider") {
            serviceProvider = user.username+"@"+user.domain;
        }

        if (providerConf[PROVIDER_NAME] == "batch") {

            var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
            var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);
            timeUnit = (( timeUnit == 'MINUTE') || ( timeUnit == 'SECOND'))?'HOUR':timeUnit;
            var tableName = providerConf.tableName + timeUnit;
            providerConf.query += "eventTimeStamp:["+data.dateStart+" TO "+data.dateEnd+"]";
            if(data.operatorName == "all" || data.operatorName=="(all)") {
                data.operatorName = "all";
            }
            if("operatoradmin" == role) {
                providerConf.query += " AND operatorName:" + operatorNameInProfile;
            }else {
                if (data.operatorName != "all" && data.operatorName != undefined) {
                    providerConf.query += " AND operatorName:" + data.operatorName;
                }
            }
            if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                providerConf.query +=  " AND serviceProviderId:"+ "\""+ data.serviceProvider+ "\"";
            }
            if (data.applicationName != "0" && data.applicationName != undefined) {
                providerConf.query +=  " AND applicationId:"+ data.applicationName;
            }
            if (data.api != "0" && data.api != undefined) {
                providerConf.query +=  " AND apiID:"+ data.api;
            }
           providerConf.query += " AND direction:" + "\""+ "sb" + "\"";
            providerConf.tableName = tableName;

        } else if (providerConf[PROVIDER_NAME] == "operator") {
            if (data.operatorName != "all" && data.operatorName != "(all)" && data.operatorName != undefined) {
                providerConf.query += "operatorName:" + data.operatorName;
                all = false;
            }
        }else if(providerConf[PROVIDER_NAME] == "sp") {
            if(data.operatorName != "all" && data.operatorName != "(all)" && data.operatorName != "((all))")  {
                providerConf.query += "serviceProviderId:" + data.serviceProvider +" AND operatorName:" + data.operatorName;
            } else  {
                providerConf.query += "serviceProviderId:" + data.serviceProvider;
            }
            all = false;
        }
        else if(providerConf[PROVIDER_NAME] == "app") {
            if (data.applicationId != "()" && data.applicationId != "0" && data.applicationId != "(0)" && data.operatorName != undefined) {
                providerConf.query += "applicationId:" + data.applicationId;
                all = false;
            }
        }

        var andSign = '';
        if((role != "admin" &&  all == false) || (providerConf[PROVIDER_NAME] == "batch")){
            andSign =  ' AND ';
        }
        if(role =="serviceProvider" && (providerConf[PROVIDER_NAME] == "operator" || providerConf[PROVIDER_NAME] == "sp")){
            var serviceProviderName = user.username+"@"+user.domain;
            providerConf.query +=  andSign +' _serviceProvider:"'+serviceProviderName+'"';
            providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_API_SUMMARY";

        }else if(role =="serviceProvider" && providerConf[PROVIDER_NAME] == "batch"){
            var serviceProviderName = user.username+"@"+user.domain;
            providerConf.query +=  andSign +' _serviceProvider:"'+serviceProviderName+'"';
        }else if(role =="publisher" && (providerConf[PROVIDER_NAME] == "operator" || providerConf[PROVIDER_NAME] == "batch")){
            providerConf.query +=  andSign +' _serviceProvider:"'+serviceProvider+'"';
        }
        print(providerAPI.getData(providerConf));

        return;


    }

}());


%>
