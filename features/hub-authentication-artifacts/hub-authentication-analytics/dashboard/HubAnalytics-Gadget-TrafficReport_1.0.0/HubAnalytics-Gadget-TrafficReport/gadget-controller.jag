<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    include("../HubAnalytics-Gadget-Commons/constants.jag");
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    var log = new Log();
    response.contentType = 'application/json';

    var FILE_NAME = FILE_NAMES.TRAFFIC_REPORT;

    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var data = request.getContent();

    var providerConf = data[PROVIDER_CONF];
    var loggedInUser = getLoggedInUser();

    if (action === "getLoggedInUser") {
        var jsonUser = {"LoggedInUser": LoggedInUser};
        print(jsonUser);
        return;
    }


    var serviceProvider = "";
    if (loggedInUser.isServiceProvider) {
        serviceProvider = loggedInUser.username;
    }

    if (action === 'getSchema') {
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        print(providerAPI.getSchema(providerConf));
        return;

    } else if (action === 'getData') {
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        providerConf.query = "";
        var all = true;

        if (providerConf[PROVIDER_NAME] == BATCH) {
            var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
            var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);
            timeUnit = (( timeUnit == 'MINUTE') || ( timeUnit == 'SECOND')) ? 'HOUR' : timeUnit;
            var tableName = providerConf.tableName + timeUnit;
            providerConf.query += "eventTimeStamp:[" + data.dateStart + " TO " + data.dateEnd + "]";

            if(data.operatorName == "all" || data.operatorName=="(all)") {
                data.operatorName = "all";
            }

            //if("operatoradmin" == role) {
            if(loggedInUser.isOperatorAdmin) {
                providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;
            } else {
                if (data.operatorName != "all" && data.operatorName != undefined) {
                    providerConf.query += " AND operatorName:" + data.operatorName;
                }
            }

            if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                providerConf.query += " AND serviceProviderId:" + "\"" + data.serviceProvider + "\"";
            }

            log.info("data.serviceProvider => " + data.serviceProvider + "  => " + providerConf.query);
            if (data.applicationName != "0" && data.applicationName != undefined) {
                providerConf.query += " AND applicationId:" + data.applicationName;
            }

            log.info("data.applicationName => " + data.applicationName + "  => " + providerConf.query);
            if (data.api != "0" && data.api != undefined) {
                providerConf.query += " AND apiID:" + data.api;
            }

            providerConf.query += " AND direction:" + "\""+ "sb" + "\"";
            log.info("data.api => " + data.api + "  => " + providerConf.query);
            providerConf.tableName = tableName;

        } else if (providerConf[PROVIDER_NAME] == TYPE.OPERATOR) {
            log.info("1");
            if (data.operatorName != "all" && data.operatorName != "(all)" && data.operatorName != undefined) {
                log.info("11");
                providerConf.query += "operatorName:" + "(" + data.operatorName + ")";
                all = false;
            }

        } else if (providerConf[PROVIDER_NAME] == TYPE.SP) {
            log.info("2");
            if (data.serviceProvider != "0" && data.serviceProvider != "(0)" && data.operatorName != undefined) {
                log.info("12");
                if(data.operatorName != "all" && data.operatorName != "(all)" )  {
                    log.info("13");
                    providerConf.query += "serviceProviderId:" + "(" + data.serviceProvider + ")" +" AND operatorName:" + "(" + data.operatorName + ")";
                } else  {
                    log.info("14");
                    providerConf.query += "serviceProviderId:" + "(" + data.serviceProvider + ")";
                }
                all = false;
            } else {
                if (loggedInUser.isOperatorAdmin) {
                    log.info("18")
                    providerConf.query += "operatorName:" + "(" + data.operatorName + ")";
                }
            }
        }
        else if (providerConf[PROVIDER_NAME] == TYPE.APP) {
            log.info("3");
            if (data.applicationId != "()" && data.applicationId != "0" && data.applicationId != "(0)" && data.operatorName != undefined) {
                log.info("15");
                providerConf.query += "applicationId:" + data.applicationId;
                all = false;
            }
        }

        var andSign = '';
        //if ((role != "admin" && all == false) || (providerConf[PROVIDER_NAME] == BATCH)) {
        if ((!(loggedInUser.isAdmin) && all == false) || (providerConf[PROVIDER_NAME] == BATCH)) {
            andSign = ' AND ';
        }

        //log.info("role => " + role + "    providerConf[PROVIDER_NAME] =>" + providerConf[PROVIDER_NAME] + "  " + (providerConf[PROVIDER_NAME] == TYPE.SP || providerConf[PROVIDER_NAME] == BATCH));
        if (loggedInUser.isServiceProvider && (providerConf[PROVIDER_NAME] == TYPE.OPERATOR || providerConf[PROVIDER_NAME] == TYPE.SP)) {
            log.info("4");
            var serviceProviderName = loggedInUser.username;
            providerConf.query += andSign + ' _serviceProvider:"' + serviceProviderName + '"';
            providerConf.tableName = STREAM.API_SUMMERY;
            print(providerAPI.getData(providerConf));
            return;
        } else if (loggedInUser.isServiceProvider && providerConf[PROVIDER_NAME] == BATCH) {
            log.info("5");
            var serviceProviderName = loggedInUser.username;
            providerConf.query += andSign + ' _serviceProvider:"' + serviceProviderName + '"';
        } else if (loggedInUser.isPublisher && (providerConf[PROVIDER_NAME] == TYPE.OPERATOR || providerConf[PROVIDER_NAME] == BATCH)) {
            log.info("6");
            providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';
        }
        log.info("table ----- " + providerConf.tableName);
        log.info("providerconf query --- " + providerConf.query);
        print(providerAPI.getData(providerConf));
        return;
    }

    else if (loggedInUser != null) {

        var userReportDirectory = "/reports/traffic/";
        var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
        //var reportPrefix = user.username + FILE_NAME;
        var reportPrefix = loggedInUser.username.replace("@carbon.super","") + FILE_NAME;

        //if (role == "") {
        if (loggedInUser.hasNoRole) {
            print({'message': 'Not Allowed!'});
            return;
        }

        if (action == "generateCSV") {

            var carbon = require('carbon');
            removeAllFiles(userReportDirectory, reportPrefix);
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var timeRangeUtil = Packages.org.wso2.analytics.shared.util.time.TimeRangeUtils;
            var timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(data.dateStart, data.dateEnd);
            timeUnit = (( timeUnit == 'MINUTE') || ( timeUnit == 'SECOND')) ? 'HOUR' : timeUnit;
            var tableName = providerConf.tableName + timeUnit;
            providerConf.query += "eventTimeStamp:[" + data.dateStart + " TO " + data.dateEnd + "]";
            providerConf.tableName = tableName;

            var reportMaxLength = 10;

            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
            log.info('providerConf[PROVIDER_NAME] ' + providerConf[PROVIDER_NAME]);

            if(loggedInUser.isOperatorAdmin) {
                providerConf.query += " AND operatorName:" + operatorNameInProfile;
            } else {
                //if (data.operatorName != "all" && data.operatorName != undefined && "serviceProvider" != role) {
                if (data.operatorName != "all" && data.operatorName != undefined && !(loggedInUser.isServiceProvider)) {
                    providerConf.query += " AND operatorName:" + data.operatorName;
                }
            }

            if (loggedInUser.isServiceProvider) {
                serviceProvider = loggedInUser.username;
                providerConf.query += " AND spName:" + "\"" + serviceProvider + "\"";
            } else {
                if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                    providerConf.query += " AND spName:" + "\"" + data.serviceProvider + "\"";
                }
            }
            log.info("data.serviceProvider => " + data.serviceProvider + "  => " + providerConf.query);
            if (data.applicationName != "0" && data.applicationName != undefined) {
                providerConf.query += " AND applicationId:" + data.applicationName;
            }
            log.info("data.applicationName => " + data.applicationName + "  => " + providerConf.query);
            if (data.api != "0" && data.api != undefined) {
                providerConf.query += " AND apiID:" + data.api;
            }
            providerConf.query += " AND direction:" + "\""+ "sb" + "\"";

            //var reportName = directory + user.username + "-traffic-report-" + new Date().getTime();
            var reportName = directory + loggedInUser.username.replace("@carbon.super","") + "-traffic-report-" + new Date().getTime();
            var reportType = "trafficCSV";
            service.generateReport(tableName, providerConf.query, reportName, reportMaxLength, reportType, null, null, null, null);
            print({'message': 'Report is generating'});

            return;

        }

        else if (action == "available") {

            var file = new File(userReportDirectory);

            var files = [];
            for (var i = 0; i < file.listFiles().length; i++) {
                //if (!file.listFiles()[i].getName().search(user.username + "-traffic-report-")) {
                if (!file.listFiles()[i].getName().search(loggedInUser.username.replace("@carbon.super",""))) {
                    files[i] = {"name": file.listFiles()[i].getName(), "index": i};
                }
            }
            print(files);
            return;

        } else if (action == "get" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory).listFiles()[request.getParameter("index")];
            response.contentType = "application/octet-stream";
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());

        } else if (action == "remove" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
            return;
        }
    }

}());

function removeAllFiles(userReportDirectory, reportPrefix1) {
    var file = new File(userReportDirectory);

    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix1)) {
            log.info("File " + file.listFiles()[i].getName() + " deleted.");
            var result = file.listFiles()[i].del();
        }
    }
};

%>