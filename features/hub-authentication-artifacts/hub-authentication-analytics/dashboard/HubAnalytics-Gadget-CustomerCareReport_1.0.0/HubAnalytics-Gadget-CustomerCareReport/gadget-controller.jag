<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    response.contentType = 'application/json';
    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';

    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var data = request.getContent();
    var providerConf = data[PROVIDER_CONF];
    var carbon = require('carbon');

    var log = new Log();

    if(action === 'getData2'){
        var providerAPI = require('js/core/batch-provider-api.js');
        var providerConf={};
        providerConf.tableName="ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_PROCESSEDSTATISTICS";
        providerConf.query="";
        providerConf.sort={};

        var sortfield =request.getParameter("columns["+request.getParameter("order[0][column]")+"][data]"); 
        var sortType = request.getParameter("order[0][dir]");
        
        if(sortfield.trim() == ""){
            sortfield = "responseTime";
        }

        providerConf.sort.field=sortfield;
        providerConf.sort.type=sortType.toUpperCase();



log.info("providerConf >> "+stringify(providerConf) );
        var start=request.getParameter("start");
        var length=request.getParameter("length");
        var draw=request.getParameter("draw");
        var search=request.getParameter("search[value]");

        var serviceProviderId = request.getParameter("a[serviceProvider]");
        var operator = request.getParameter("a[operator]");
        var operatorList = request.getParameter("a[operatorList][]");

        var application = request.getParameter("a[application]");
        var dateEnd = request.getParameter("a[dateEnd]");
        var dateStart = request.getParameter("a[dateStart]");

        providerConf.query = "responseTime:["+dateStart+" TO "+dateEnd+"] ";

        if( search.length    >0){
            providerConf.query = concatQuery(providerConf.query, "jsonBody:"+search);                    
        }  
        if(serviceProviderId != 0){
            providerConf.query = concatQuery(providerConf.query, "serviceProviderId: '"+serviceProviderId+"'");
        }
        if(application !=0){
            providerConf.query = concatQuery(providerConf.query, "applicationId: '"+application+"'");
        }

        if(operator.trim() == 'All'){
            if(operatorList != null){
                var operatorListText = "";
                for (var p in operatorList){
                    operatorListText += operatorList[p].toString(); 
                }
                providerConf.query = concatQuery(providerConf.query, "operatorName: ("+operatorListText+")");
            }
        }else {
            providerConf.query = concatQuery(providerConf.query, "operatorName: '"+operator+"'");
        }

        var recordsCount=providerAPI.getRecordCount(providerConf);

        var resultPre = stringify( providerAPI.getData2(providerConf, start, length));

        var result = resultPre.replace(/\r?\n|\r/g, " dd ");

        result = '{  "draw": '+draw+', "recordsTotal": '+recordsCount+',  "recordsFiltered": '+recordsCount+',  "data":' + result+' }';
        print(result);

    } else {

        log.info("providerConf   >> "+providerConf);
        log.info("data  >> "+stringify( data));

    var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");
    var user = session.get('user');
    var role = getRole(user);
    var operatorNameInProfile = getOperator(user);

    if(action === 'getRole') {
        var jsonRole = {"role": role };
        print(jsonRole);
        return;
    }

    if(action === 'getProfileOperator') {
        var jsonOperatorName = {"operatorName": operatorNameInProfile };
        print(jsonOperatorName);
        return;
    }

    if (action === 'getSchema') {
        print(providerAPI.getSchema(providerConf));
        return;
    } else if(action === 'getData'){

        //Check logged in user role and decide which operators to load
        var all = true;
        var currentOperator;

        var serviceProvider = "";
        if (role == "serviceProvider") {
            serviceProvider = user.username + "@" + user.domain;
        }

        if (providerConf[PROVIDER_NAME] == "batch") {

                 providerConf.query += "responseTime:["+data.dateStart+" TO "+data.dateEnd+"]";

            if(data.operatorName == "all" || data.operatorName=="(all)") {
                data.operatorName = "all";
            }

            if("operatoradmin" == role || "customercare" == role) {
                providerConf.query += " AND operatorName:" + operatorNameInProfile;
            } else {
                if (data.operatorName != "all" && data.operatorName != undefined) {
                    providerConf.query += " AND operatorName:" + data.operatorName;
                }
            }
                    if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                        providerConf.query +=  " AND serviceProviderId:"+ "\""+ data.serviceProvider+ "\"";
                    }
                    if (data.msisdn.toLowerCase().trim() != "") {
                        providerConf.query +=  " AND msisdn:"+ data.msisdn;
                    }
                    if (data.applicationName != "0" && data.applicationName != undefined) {
                        providerConf.query +=  " AND applicationId:"+ data.applicationName;
                    }
            providerConf.query += " AND direction:" + "\""+ "sb" + "\"";
            log.info("batch query...... :               "+ providerConf.query);
        } else if (providerConf[PROVIDER_NAME] == "operator") {
            if (data.operatorName != "all" && data.operatorName != "(all)" && data.operatorName != undefined) {
                providerConf.query += "operatorName:" + data.operatorName;
                all = false;
            }
        }else if(providerConf[PROVIDER_NAME] == "sp") {
            if (data.serviceProvider != "0" && data.serviceProvider != "(0)" && data.operatorName != undefined) {
                if(data.operatorName != "all" && data.operatorName != "(all)" && data.operatorName != "((all))")  {
                    providerConf.query += "serviceProviderId:" + data.serviceProvider +" AND operatorName:" + data.operatorName;
                } else  {
                    providerConf.query += "serviceProviderId:" + data.serviceProvider;
                }
                all = false;
            }
        }else if(providerConf[PROVIDER_NAME] == "app") {
            if (data.applicationId != "()" && data.applicationId != "0" && data.applicationId != "(0)" && data.operatorName != undefined) {
                providerConf.query += "applicationId:" + data.applicationId;
                all = false;
            }
        }

        var andSign = '';
        if((role != "admin" &&  all == false) || (providerConf[PROVIDER_NAME] == "batch")){
         andSign =  ' AND ';
        }
        log.info("role => "+role+"    providerConf[PROVIDER_NAME] =>"+providerConf[PROVIDER_NAME] +"  "+(providerConf[PROVIDER_NAME] == "sp" || providerConf[PROVIDER_NAME] == "batch"));
        if(role =="serviceProvider" && (providerConf[PROVIDER_NAME] == "operator" || providerConf[PROVIDER_NAME] == "sp")){
                 // var serviceProviderName = user.username +"@"+ user.domain;
                  providerConf.query +=  andSign +' _serviceProvider:"'+serviceProvider+'"';
                  providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_API_SUMMARY";
                //  print(providerAPI.getData(providerConf));
                 // return;

        }else if(role =="serviceProvider" && providerConf[PROVIDER_NAME] == "batch"){
          // var serviceProviderName = user.username +"@"+ user.domain;
          providerConf.query +=  andSign +' _serviceProvider:"'+serviceProvider+'"';
        }else if(role =="publisher" && (providerConf[PROVIDER_NAME] == "operator" || providerConf[PROVIDER_NAME] == "batch")){
          providerConf.query +=  andSign +' _serviceProvider:"'+serviceProvider+'"';
        }

        var displayStart = data.displayStart;
        var displayLength = data.displayLength;
        var records = data.records;
        var isTableUpdate = data.isTableUpdate;

        if(isTableUpdate) {
            var requestStart = records;
            log.info(stringify(providerAPI.getData(providerConf, requestStart, displayLength)));
            print(providerAPI.getData(providerConf, requestStart, displayLength));
        }
        else{
var resultPre = stringify( providerAPI.getData(providerConf, 0, 10));

//log.info("resultPre   >> "+resultPre);

var result = resultPre.replace(/\r?\n|\r/g, " dd ")
            print(result);
        }

        return;

    }

    }
}());

function concatQuery(query, newQuery){
    query +=( query.trim().length > 0)?" AND ":"";
    return query + newQuery;     
};

%>